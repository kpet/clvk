// Copyright 2022 The clvk authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// Compiler
//
OPTION(std::string, cache_dir, "")
OPTION(std::string, compiler_temp_dir, "")
OPTION(bool, skip_spirv_capability_check, false)
OPTION(bool, keep_temporaries, false)
OPTION(std::string, spirv_arch, "spir")
OPTION(bool, physical_addressing, false)

OPTION(std::string, clspv_native_builtins, "")
OPTION(std::string, clspv_library_builtins, "")

OPTION(uint32_t, printf_buffer_size, 1024*1024u)

OPTION(uint32_t, opencl_version, (uint32_t)CL_MAKE_VERSION(3, 0, 0))

#if COMPILER_AVAILABLE
OPTION(std::string, clspv_options, "")
#if !CLSPV_ONLINE_COMPILER
OPTION(std::string, clspv_path, DEFAULT_CLSPV_BINARY_PATH)
#if ENABLE_SPIRV_IL
OPTION(std::string, llvmspirv_bin, DEFAULT_LLVMSPIRV_BINARY_PATH)
#endif
#endif // !CLSPV_ONLINE_COMPILER
#endif // COMPILER_AVAILABLE

OPTION(uint32_t, force_subgroup_size, 0u) // 0 meaning not forced
OPTION(uint32_t, preferred_subgroup_size, 0u) // 0 meaning no preference

//
// Command execution
//
OPTION(uint32_t, queue_global_priority, 1u)
OPTION(uint32_t, max_cmd_batch_size, 10000u)
OPTION(uint32_t, max_first_cmd_batch_size, 10000u)
OPTION(uint32_t, max_cmd_group_size, UINT32_MAX)
OPTION(uint32_t, max_first_cmd_group_size, UINT32_MAX)

OPTION(uint32_t, max_entry_points_instances, 2*1024u) // FIXME find a better definition
OPTION(uint32_t, enqueue_command_retry_sleep_us, UINT32_MAX) // UINT32_MAX meaning no retry

OPTION(bool, supports_filter_linear, true)

//
// Logging
//
OPTION(uint32_t, log, 0u)
OPTION(bool, log_colour, false)
OPTION(std::string, log_dest, "")
OPTION(std::string, log_groups, "")

//
// Debug
//
OPTION(bool, validation_layers, false)
OPTION(uint32_t, percentage_of_available_memory_reported, 100u)
OPTION(uint32_t, max_mem_alloc_size_mb, 1024u)
OPTION(uint32_t, spirv_validation, 2u)

//
// Instrumentation
//
OPTION(bool, queue_profiling_use_timestamp_queries, false)

#if CLVK_PERFETTO_BACKEND_INPROCESS
OPTION(uint32_t, perfetto_trace_max_size, 1024u)
OPTION(std::string, perfetto_trace_dest, "clvk.perfetto-trace")
#endif // CLVK_PERFETTO_BACKEND_INPROCESS

//
// Test
//
#if CLVK_UNIT_TESTING_ENABLED
OPTION(bool, force_descriptor_set_allocation_failure, false)
OPTION(bool, early_flush_enabled, true)
#endif
